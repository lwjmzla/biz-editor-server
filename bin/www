#!/usr/bin/env node

/**
 * Module dependencies.
 */

// eslint-disable-next-line import/order
const app = require('../src/app')
const debug = require('debug')('demo:server')
const http = require('http')
const syncDb = require('../src/db/seq/utils/sync-alter')

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  // eslint-disable-next-line no-restricted-globals
  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000')

// app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback())

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`)
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`)
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`
  debug(`Listening on ${bind}`)
}

/**
 * Listen on provided port, on all network interfaces.
 */
// 先同步 mysql 数据表
console.log('3s后同步mysql数据表---')
setTimeout(() => {
  // !延迟3s，需要等mysql启动了才能同步 mysql 数据表，否则出现报错SequelizeConnectionRefusedError: connect ECONNREFUSED 172.22.0.5:3306
  console.log('正在同步mysql数据表---')
  syncDb().then(() => {
    console.log('mysql数据表同步完成---')
    // 再启动服务
    server.listen(port)
    server.on('error', onError)
    server.on('listening', onListening)
  })
}, 3000)
