version: '3'
services:
    editor-server: # service name
        build:
            context: . # 当前目录
            dockerfile: Dockerfile # 基于 Dockerfile 构建
        image: editor-server # 依赖于当前 Dockerfile 创建出来的镜像
        container_name: editor-server
        ports:
            - 81:3000 # 宿主机通过 81 访问
    editor-redis: # service name，重要！
        image: redis # 引用官网 redis 镜像
        container_name: editor-redis
        ports:
            # 宿主机(本机)，可以用 127.0.0.1:6378 即可连接容器中redis
            # 其他 docker 容器通过服务名称+redis端口号6379访问容器中redis
            - 6378:6379
        environment:
            - TZ=Asia/Shanghai # 设置时区
    editor-mysql:
        image: mysql # 引用官网 mysql 镜像
        container_name: editor-mysql
        restart: always # 出错则重启
        privileged: true # 高权限，执行下面的 mysql/init
        command: --default-authentication-plugin=mysql_native_password # 远程访问
        ports:
            - 3305:3306 # 宿主机可以用 127.0.0.1:3305 即可连接容器中的数据库，和 redis 一样
        volumes:
            - .docker-volumes/mysql/log:/var/log/mysql # 记录日志
            - .docker-volumes/mysql/data:/var/lib/mysql # 数据持久化
            - ./mysql/init:/docker-entrypoint-initdb.d/ # 初始化 sql
        environment:
            - MYSQL_DATABASE=lego_course # 初始化容器时创建数据库
            - MYSQL_ROOT_PASSWORD=123
            - TZ=Asia/Shanghai # 设置时区
    editor-mongo:
        image: mongo # 引用官网 mongo 镜像
        container_name: editor-mongo
        restart: always
        volumes: # 相当于docker run -p 82:80 -d -v xxxx:xxxx
            - '.docker-volumes/mongo/data:/data/db' # 数据持久化，就是永远把数据放在一个位置
        environment:
            - MONGO_INITDB_DATABASE=lego_course
            - TZ=Asia/Shanghai # 设置时区
        ports:
            - '27016:27017' # 宿主机可以用 127.0.0.1:27016 即可连接容器中的数据库